// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum TransactionType {
  income
  expense
  non_cash_journal
  offset_income
  offset_expense
}

enum UserRole {
  admin
  user
}

model User {
  id        String   @id @default(uuid())
  authId    String   @unique @map("auth_id") // References Supabase auth.users.id
  email     String   @unique @db.VarChar(255)
  role      UserRole @default(user)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model PoliticalOrganization {
  id              BigInt            @id @default(autoincrement())
  displayName     String            @map("display_name") @db.VarChar(255)
  orgName         String?           @map("org_name") @db.VarChar(255)
  slug            String            @unique @db.VarChar(255)
  description     String?           @db.Text
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  transactions    Transaction[]
  balanceSnapshots BalanceSnapshot[]

  @@map("political_organizations")
}

model Transaction {
  id                      BigInt               @id @default(autoincrement())
  politicalOrganizationId BigInt               @map("political_organization_id")
  politicalOrganization   PoliticalOrganization @relation(fields: [politicalOrganizationId], references: [id], onDelete: Cascade)
  transactionNo           String               @map("transaction_no") @db.VarChar(255)
  transactionDate         DateTime             @map("transaction_date") @db.Date
  financialYear           Int                  @map("financial_year")
  transactionType         TransactionType      @map("transaction_type")
  debitAccount            String               @map("debit_account") @db.VarChar(255)
  debitSubAccount         String?              @map("debit_sub_account") @db.VarChar(255)
  debitDepartment         String?              @map("debit_department") @db.VarChar(255)
  debitPartner            String?              @map("debit_partner") @db.VarChar(255)
  debitTaxCategory        String?              @map("debit_tax_category") @db.VarChar(255)
  debitAmount             Decimal              @map("debit_amount") @db.Decimal(15, 2)
  creditAccount           String               @map("credit_account") @db.VarChar(255)
  creditSubAccount        String?              @map("credit_sub_account") @db.VarChar(255)
  creditDepartment        String?              @map("credit_department") @db.VarChar(255)
  creditPartner           String?              @map("credit_partner") @db.VarChar(255)
  creditTaxCategory       String?              @map("credit_tax_category") @db.VarChar(255)
  creditAmount            Decimal              @map("credit_amount") @db.Decimal(15, 2)
  description             String?              @db.Text
  friendlyCategory        String?              @map("friendly_category") @db.Text
  memo                    String?              @db.Text
  categoryKey             String               @map("category_key") @db.VarChar(255)
  label                   String               @default("") @db.VarChar(255)
  hash                    String               @default("") @db.VarChar(255)
  createdAt               DateTime             @default(now()) @map("created_at")
  updatedAt               DateTime             @updatedAt @map("updated_at")

  @@unique([politicalOrganizationId, transactionNo])
  @@index([politicalOrganizationId, financialYear, transactionType, transactionDate(sort: Desc)])
  @@map("transactions")
}

model BalanceSnapshot {
  id                      BigInt                @id @default(autoincrement())
  politicalOrganizationId BigInt                @map("political_organization_id")
  politicalOrganization   PoliticalOrganization @relation(fields: [politicalOrganizationId], references: [id], onDelete: Cascade)
  snapshotDate            DateTime              @map("snapshot_date") @db.Date
  balance                 Decimal               @db.Decimal(15, 2)
  createdAt               DateTime              @default(now()) @map("created_at")
  updatedAt               DateTime              @updatedAt @map("updated_at")

  @@index([politicalOrganizationId, snapshotDate(sort: Desc), updatedAt(sort: Desc)])
  @@map("balance_snapshots")
}
